// Configures generation of JavaDoc & Dokka artifacts

def platform = platformOf(project)
def coroutines_core = platformLib("kotlinx-coroutines-core", platform)

if (platform != "common") {
    apply plugin: 'org.jetbrains.dokka'
}

if (platform == "jvm") {
    // real xxx-javadoc.jar for JVM
    task dokkaJavadoc(type: dokka.getClass()) {
        outputFormat = 'javadoc'
        outputDirectory = "$buildDir/javadoc"
    }

    task javadocJar(type: Jar, dependsOn: dokkaJavadoc) {
        classifier = 'javadoc'
        from "$buildDir/javadoc"
    }
} else {
    // empty xxx-javadoc.jar
    task javadocJar(type: Jar) {
        classifier = 'javadoc'
        from "$buildDir/javadoc" // would not exist
    }
}

if (platform != "common") {
    dokka {
        outputFormat = 'kotlin-website'
    }

    tasks.withType(dokka.getClass()) {
        jdkVersion = 8
        includes = ['README.md']
        linkMapping {
            def relPath = rootProject.projectDir.toPath().relativize(projectDir.toPath())
            dir = "$projectDir/src/main/kotlin"
            url = "http://github.com/kotlin/kotlinx.coroutines/tree/master/$relPath/src/main/kotlin"
            suffix = "#L"
        }
        kotlinTasks { [] }
        impliedPlatforms = [platform]
        sourceRoot {
            path = project.file('src/main/kotlin')
            platforms = [platform]
        }
        if (project.name == coroutines_core) {
            sourceRoot {
                path = rootProject.file('common/kotlinx-coroutines-core-common/src/main/kotlin')
            }
        }
        afterEvaluate {
            classpath = project.configurations.compileClasspath.files
            dependsOn(project.configurations.compileClasspath)
            if (platform == "js") {
                def jvmlib = project.dependencies.create("org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version")
                classpath += project.configurations.detachedConfiguration(jvmlib).files
            }
        }
    }
}
