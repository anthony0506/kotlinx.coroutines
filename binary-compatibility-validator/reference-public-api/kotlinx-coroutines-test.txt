public abstract interface class kotlinx/coroutines/test/DelayController {
	public abstract fun advanceTimeBy (JLjava/util/concurrent/TimeUnit;)J
	public abstract fun advanceTimeToNextDelayed ()J
	public abstract fun advanceUntilIdle ()J
	public abstract fun cleanupTestCoroutines ()V
	public abstract fun currentTime (Ljava/util/concurrent/TimeUnit;)J
	public abstract fun pauseDispatcher ()V
	public abstract fun pauseDispatcher (Lkotlin/jvm/functions/Function1;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public abstract fun resumeDispatcher ()V
	public abstract fun runCurrent ()V
}

public final class kotlinx/coroutines/test/DelayController$DefaultImpls {
	public static synthetic fun advanceTimeBy$default (Lkotlinx/coroutines/test/DelayController;JLjava/util/concurrent/TimeUnit;ILjava/lang/Object;)J
	public static synthetic fun currentTime$default (Lkotlinx/coroutines/test/DelayController;Ljava/util/concurrent/TimeUnit;ILjava/lang/Object;)J
}

public final class kotlinx/coroutines/test/TestBuilders {
	public static final fun runBlockingTest (Lkotlin/coroutines/CoroutineContext;Lkotlin/jvm/functions/Function2;)V
	public static final fun runBlockingTest (Lkotlinx/coroutines/test/TestCoroutineDispatcher;Lkotlin/jvm/functions/Function2;)V
	public static final fun runBlockingTest (Lkotlinx/coroutines/test/TestCoroutineScope;Lkotlin/jvm/functions/Function2;)V
	public static synthetic fun runBlockingTest$default (Lkotlin/coroutines/CoroutineContext;Lkotlin/jvm/functions/Function2;ILjava/lang/Object;)V
	public static final fun withTestContext (Lkotlinx/coroutines/test/TestCoroutineScope;Lkotlin/jvm/functions/Function2;)V
}

public final class kotlinx/coroutines/test/TestCoroutineCoroutineExceptionHandler : kotlinx/coroutines/CoroutineExceptionHandler, kotlinx/coroutines/test/UncaughtExceptionCaptor {
	public fun <init> ()V
	public fun cleanupTestCoroutines ()V
	public fun fold (Ljava/lang/Object;Lkotlin/jvm/functions/Function2;)Ljava/lang/Object;
	public fun get (Lkotlin/coroutines/CoroutineContext$Key;)Lkotlin/coroutines/CoroutineContext$Element;
	public synthetic fun getKey ()Lkotlin/coroutines/CoroutineContext$Key;
	public fun getKey ()Lkotlinx/coroutines/CoroutineExceptionHandler$Key;
	public fun getUncaughtExceptions ()Ljava/util/List;
	public fun handleException (Lkotlin/coroutines/CoroutineContext;Ljava/lang/Throwable;)V
	public fun minusKey (Lkotlin/coroutines/CoroutineContext$Key;)Lkotlin/coroutines/CoroutineContext;
	public fun plus (Lkotlin/coroutines/CoroutineContext;)Lkotlin/coroutines/CoroutineContext;
}

public final class kotlinx/coroutines/test/TestCoroutineDispatcher : kotlinx/coroutines/CoroutineDispatcher, kotlinx/coroutines/Delay, kotlinx/coroutines/test/DelayController {
	public fun <init> ()V
	public fun advanceTimeBy (JLjava/util/concurrent/TimeUnit;)J
	public fun advanceTimeToNextDelayed ()J
	public fun advanceUntilIdle ()J
	public fun cleanupTestCoroutines ()V
	public fun currentTime (Ljava/util/concurrent/TimeUnit;)J
	public fun delay (JLkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun dispatch (Lkotlin/coroutines/CoroutineContext;Ljava/lang/Runnable;)V
	public fun invokeOnTimeout (JLjava/lang/Runnable;)Lkotlinx/coroutines/DisposableHandle;
	public fun pauseDispatcher ()V
	public fun pauseDispatcher (Lkotlin/jvm/functions/Function1;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun resumeDispatcher ()V
	public fun runCurrent ()V
	public fun scheduleResumeAfterDelay (JLkotlinx/coroutines/CancellableContinuation;)V
	public fun toString ()Ljava/lang/String;
}

public abstract interface class kotlinx/coroutines/test/TestCoroutineScope : kotlinx/coroutines/CoroutineScope, kotlinx/coroutines/test/DelayController, kotlinx/coroutines/test/UncaughtExceptionCaptor {
}

public final class kotlinx/coroutines/test/TestCoroutineScopeKt {
	public static final fun TestCoroutineScope (Lkotlin/coroutines/CoroutineContext;)Lkotlinx/coroutines/test/TestCoroutineScope;
	public static synthetic fun TestCoroutineScope$default (Lkotlin/coroutines/CoroutineContext;ILjava/lang/Object;)Lkotlinx/coroutines/test/TestCoroutineScope;
}

public final class kotlinx/coroutines/test/TestDispatchers {
	public static final fun resetMain (Lkotlinx/coroutines/Dispatchers;)V
	public static final fun setMain (Lkotlinx/coroutines/Dispatchers;Lkotlinx/coroutines/CoroutineDispatcher;)V
}

public abstract interface class kotlinx/coroutines/test/UncaughtExceptionCaptor {
	public abstract fun cleanupTestCoroutines ()V
	public abstract fun getUncaughtExceptions ()Ljava/util/List;
}

public final class kotlinx/coroutines/test/UncompletedCoroutinesError : java/lang/AssertionError {
	public fun <init> (Ljava/lang/String;Ljava/lang/Throwable;)V
	public synthetic fun <init> (Ljava/lang/String;Ljava/lang/Throwable;ILkotlin/jvm/internal/DefaultConstructorMarker;)V
}

